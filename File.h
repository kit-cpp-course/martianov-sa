#pragma once

// Класс для работы с файлами.
class File
{
public:
	// Константы доступа к файлу
	enum mode
	{
		// Открывает файл на чтение и запись в конец файла
		FULL = std::ios::binary | std::ios::in | std::ios::out,
		// Открывает файл только для чтения с начала файла
		READ_ONLY = std::ios::binary | std::ios::in,
		// Открывает файл только для записи в конец файла
		WRITE_ONLY = std::ios::binary | std::ios::out
	};

private:
	// Поток файла
	std::fstream f;
	
	// Уровень доступа к файлу
	mode access;
	
	// Пулть к файлу
	std::string fileName;
	
	// Последняя позиция в байте куда был записан бит
	size_t writeBitPos;
	
	// Последняя позиция в байте откуда был считан бит
	size_t readBitPos;

public:
	/**
	  Основной конструктор.

	  Принимает путь к файлу и режим, в котом он будет открыт.
	*/
	File(std::string source, mode accessMode = FULL);

	// Основной деструктор файла.
	~File();

	/**
	  Считывание нескольких байтов.

	  Принимает область памяти, куда будет записаны прочитанные байты и количество байт,
	  которых нужно прочитать.
	*/
	bool readNextBytes(char * bytes, size_t numOfBytes = sizeof(char));

	/**
	  Запись нескольких байтов.

	  Принимает область памяти, откуда будут записаны байты в файл и количество байт,
	  которых нужно записать.
	*/
	bool writeNextBytes(char * bytes, size_t numOfBytes = sizeof(char));

	/**
	  Считывание следующего бита.

	  Принимает область памяти, куда будет записан прочитанный бит.
	*/
	bool readNextBit(char & bit);

	/**
	  Запись следующего бита.

	  Принимает область памяти, откуда будет записан бит в файл.
	*/
	bool writeNextBit(char bit, char & lastByte);

	/**
	  Окончание считывания битов.

	  Обнуляет позицию последнего прочитанного бита.
	*/
	void finishReadBits();

	/**
	  Окончание записи битов.

	  Обнуляет позицию последнего записанного бита.
	*/
	void finishWriteBits();

	// Перевод каретки в начало файла.
	void rewindToStart();

	// Очищает файл.
	void clearData();
};
