#pragma once
#include "HuffToken.h"

/**
  Класс "словаря Хафмана". Содержит в себе "лексемы Хаффмана". Они хранятся в отсортированном
  по частотам по убыванию порядке, но имеется возможность быстрого доступа к ним по символу
  за счет массива ключей. В массиве ключей индексами являются символы (всего возможно не более
  256), а значениями ключи - индексы лексем с данными символами в массиве лексем.
*/
class HuffDict
{
	// Массив, сопоставляющий ключи лексем и их символы
	short * keysBySymbols;
	
	// Массив самих лексем
	HuffToken * huffTokens;
	
	/**
	  Функция добавления лексемы в словарь.

	  Используется при добавлении нового символа, если этот символ встретился впервые.
	  Создает новую лексему с данным символом, его частотой равной единице и пустым кодом,
	  добавляет эту лексему в конец словаря.
	*/
	void addHuffToken(char symbol);

	/**
	  Функция изменения лексемы в словаре.

	  Используется при добавлении нового символа, если этот символ уже встречался. Увеличивает
	  на единицу частоту данного символа и после если нужно перемещает лексему ближе к началу
	  словаря, чтобы он сохранял сортировку по частотам.
	*/
	void modifyHuffToken(HuffToken * token);

	// Функция, меняющая две лексемы местами.
	void swapHuffTokens(HuffToken & a, HuffToken & b);

	// Преобразует char в unsigned char так, чтобы сохранялась битовая запись.
	unsigned char uchar(char & a);

	// Создает копию передоваемого словаря и помещает в текущий.
	void copy(const HuffDict & source);
public:
	// Размер словаря (количество лексем).
	size_t size;

	/**
	  Основной конструктор.

	  Выделяет память для массива лексем и массива ключей. Очевидно, что каждый может содержать
	  не больше 256 элементов. Массив ключей по умолчанию заполняется -1, это означает, что
	  в словаре нет лексемы с данным сиволом (данный символ не встретился в данных, на основе
	  которых был создан словарь).
	*/
	HuffDict();

	// Основной деструктор.
	~HuffDict();

	/**
	  Обращение к словарю по ключу.

	  При таком обращении работа со словарем похожа на работу с обычным массивом. Возращается
	  указатель на лексему из массива лексем с данным ключом (индексом). Если такой лексемы нет
	  (некоректный ключ) возвращается нулевой указатель.
	*/
	HuffToken * operator[](short key);

	/**
	  Обращение к словарю по символу.

	  Возращается указатель на лексему из массива лексем с данным символом. Если такой лексемы нет
	  (данный символ не встретился в данных, на основе которых был создан словарь) возвращается
	  нулевой указатель.
	*/
	HuffToken * operator()(char symbol);

	/**
	  Функция добавления символа в словарь.

	  Если этот символ уже встречался, будет изменена соответствующая ему лексема. Если символ
	  встретился впервые - будет создана новая лексема, при это сохранится сортировка словаря.
	*/
	void addSymbol(char symbol);

	// Конструктор копирования.
	HuffDict(const HuffDict & that);

	// Оператор присваивания.
	HuffDict & operator=(const HuffDict & that);
};
